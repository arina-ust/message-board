openapi: 3.0.1

info:
  title: message-board
  description: Public message board service
  version: 1.0.0

servers:
  - url: 'http://localhost'

tags:
  - name: message-board
    description: Public message board service

paths:
  /v1/sign-in:
    post:
      summary: 'Sign in into the board service'
      tags:
        - message-board
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/userDTO'
      responses:
        200:
          description: 'Successful sign-in'
        400:
          descirption: 'User does not exist or password is incorrect'

  /v1/sign-up:
    post:
      summary: 'Sign up to the board service'
      tags:
        - message-board
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/userDTO'
      responses:
        200:
          description: 'Successful sign-up'
        400:
          description: 'User already exists'

  /v1/board:
    get:
      summary: 'Get all the messages on the board'
      tags:
        - message-board
      operationId: getAllMessages
      parameters:
        - in: query
          name: offset
          description: 'The number of messages to skip'
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: 'The number of messages to return'
          required: false
          schema:
            type: integer
      responses:
        200:
          description: 'List of all the messages'
          content:
            application/json:
              schema:
                $ref:
                  '#/components/schemas/messageListDTO'
  /v1/messages:
    get:
      summary: 'Get messages created by the user'
      tags:
        - message-board
      operationId: getMessagesForUser
      parameters:
        - in: query
          name: offset
          description: 'The number of messages to skip'
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: 'The number of messages to return'
          required: false
          schema:
            type: integer
      responses:
        200:
          description: 'List of messages created by the user'
          content:
            application/json:
              schema:
                $ref:
                  '#/components/schemas/messageListDTO'
    post:
      summary: 'Create new message'
      tags:
        - message-board
      operationId: createMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/messageDTO'
      responses:
        201:
          description: 'Created new message'
  /v1/messages/{id}:
    put:
      summary: 'Update message'
      tags:
        - message-board
      operationId: updateMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: 'Message id'
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/messageDTO'
      responses:
        204:
          description: 'Updated the message'
        404:
          description: 'Message not found, cannot update it'
    delete:
      summary: 'Delete message'
      tags:
        - message-board
      operationId: deleteMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: 'Message id'
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        204:
          description: 'Deleted the message'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    userDTO:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    messageDTO:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        text:
          type: string
        userId:
          type: integer
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime
      required:
        - title
        - text

    messageListDTO:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/messageDTO'